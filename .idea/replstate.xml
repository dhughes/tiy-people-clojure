<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1464895121923">{:repl-history {:ide [], :local [&quot;(+ 1 1)\n   &quot; &quot;(+ 1 100)\n   &quot; &quot;(foo)&quot; &quot;(foo 1)\n     &quot; &quot;(foo)\n  &quot; &quot;(foo \&quot;Dane\&quot;)\n     &quot; &quot;(foo \&quot;Doug\&quot;)\n     \n     &quot; &quot;(defn headers \&quot;id,first_name,last_name,email,country,ip_address\&quot;)&quot; &quot;(def headers \&quot;id,first_name,last_name,email,country,ip_address\&quot;)&quot; &quot;headers&quot; &quot;(str/split headers #\&quot;,\&quot;)&quot; &quot;(first (str/split headers #\&quot;,\&quot;))&quot; &quot;(rest (str/split headers #\&quot;,\&quot;))&quot; &quot;(map (fn [line]\n       (str/split line #\&quot;,\&quot;))\n     headers)&quot; &quot;(map (fn [line]\n       (str/split line #\&quot;,\&quot;))\n     [headers])&quot; &quot;(def value [1 2 3 4 5])&quot; &quot;value&quot; &quot;(map #(+ 1 %) value)&quot; &quot;(map (fn [val]\n       (+ val 1))\n     value)&quot; &quot;(map (fn [val]\n       (* val 11))\n     value)&quot; &quot;(map (fn [name]\n       (str/reverse name))\n     [\&quot;Doug\&quot;, \&quot;Dan\&quot;, \&quot;Dane\&quot;])&quot; &quot;(map str/reverse) [\&quot;Doug\&quot;, \&quot;Dan\&quot;, \&quot;Dane\&quot;]&quot; &quot;(map str/reverse [\&quot;Doug\&quot;, \&quot;Dan\&quot;, \&quot;Dane\&quot;])&quot; &quot;(zipmap [\&quot;one\&quot; \&quot;two\&quot; \&quot;three\&quot;] [1 2 3])&quot; &quot;\&quot;Brazil\&quot;&quot; &quot;China&quot; &quot;\&quot;Sweden\&quot;&quot; &quot;send-off&quot; &quot;x&quot; &quot;Sweden&quot; &quot;(doc pr-str)\n     &quot; &quot;(doc pr-str)&quot; &quot;toStr ()&quot; &quot;(-main)\n  &quot; &quot;Brazil&quot; &quot;{:name \&quot;Doug\&quot; :age 38}&quot; &quot;({:name \&quot;Doug\&quot; :age 38} :name) &quot; &quot;({:name \&quot;Doug\&quot; :age 38} :height) &quot; &quot;(:height {:name \&quot;Doug\&quot; :age 38}) &quot; &quot;(:height {:name \&quot;Doug\&quot; :age 38} 6) &quot; &quot;(:height {:name \&quot;Doug\&quot; :age 38 :height 5.5} 6) &quot; &quot;(doc reduce)\n     &quot; &quot;(def values [1 2 3 4 5])&quot; &quot;values&quot; &quot;(reduce + values)&quot; &quot;(reduce (fn [x y] (if (&gt; y x) y x) ) values)&quot; &quot;(reduce (fn [x y] (if (&gt; y x) y x) ) [123 7 60000 145 90])&quot; &quot;(defn associate [val key] {key value})&quot; &quot;(defn associate [val key] {key val})&quot; &quot;(associate 0 :a)&quot; &quot;(map-vals 0 [:a :b :c])&quot; &quot;(collect-vals 0 [:a :b :c])&quot; &quot;(into {:name \&quot;Doug\&quot;} ({:a 0} {:b 723}))&quot; &quot;(into {:name \&quot;Doug\&quot;} {:a 0} {:b 723})&quot; &quot;(into {:name \&quot;Doug\&quot;} {:a 0})&quot; &quot;(into {:name \&quot;Doug\&quot;} {:a 0}  {:b 723})&quot; &quot;(into {:name \&quot;Doug\&quot;} [{:a 0}  {:b 723}])&quot; &quot;(into {:name \&quot;Doug\&quot;} ({:a 0}  {:b 723}))&quot; &quot;(into {} [{:a 0}  {:b 723}])&quot; &quot;((fn [val sq]\n  (into {} (map #({% val} seq)))) 0 [:a :b :c]) &quot; &quot;((fn [val sq]\n  (into {} (vector (map #({% val} seq))))) 0 [:a :b :c]) &quot; &quot;(vector (1 2 3))&quot; &quot;(vector '(1 2 3))&quot; &quot;((fn [val sq]\n  (into {} (map #({% val}) seq)))) 0 [:a :b :c] &quot; &quot;((fn [val sq]\n  (into {} (map #({% val}) sq)))) 0 [:a :b :c] &quot; &quot;((fn [val sq]\n  (into {} (map #({% val}) sq))) 0 [:a :b :c]) &quot; &quot;((fn [val sq]\n  (into {} (map #({% val}) sq))) [:a :b :c]) &quot; &quot;((fn [val sq]\n  (into {} (map #({% val}) sq)) [:a :b :c])) &quot; &quot;((fn [val sq]\n  (into {} (map #({% val}) sq) [:a :b :c]))) &quot; &quot;(+ 1 1)&quot; &quot;(read-people)&quot; &quot;(-main)&quot; &quot;(doc atom)&quot; &quot;(doc Atom)\n     &quot; &quot;(doc defonce)\n     &quot; &quot;(doc reset!)\n     &quot; &quot;(def abc \&quot;def\&quot;)&quot; &quot;adc&quot; &quot;abc&quot; &quot;@abc&quot;], :remote []}}</component>
</project>